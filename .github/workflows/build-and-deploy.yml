name: Build and Deploy Jekyll Blog

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to keep dependencies updated
    - cron: '0 0 * * 0'

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  # Use GitHub Pages compatible settings
  JEKYLL_ENV: production

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper git info

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true # runs 'bundle install' and caches gems

      - name: 🔧 Setup Node.js (for additional processing)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Node dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: 🔍 Lint and validate content
        run: |
          # Check for common markdown issues
          echo "Checking for broken links and formatting..."
          
          # Validate YAML frontmatter
          find _posts -name "*.md" -o -name "*.markdown" | while read file; do
            echo "Validating $file"
            head -20 "$file" | grep -q "^---$" || echo "Warning: $file may have invalid frontmatter"
          done

      - name: 🏗️ Build Jekyll site
        run: |
          bundle exec jekyll build --verbose --trace
        env:
          JEKYLL_ENV: production

      - name: 🧪 Test built site
        run: |
          # Basic tests for the built site
          test -f "_site/index.html" || exit 1
          test -d "_site/assets" || exit 1
          
          # Check for essential pages
          test -f "_site/about/index.html" || echo "Warning: About page not found"
          test -f "_site/categories/index.html" || echo "Warning: Categories page not found"
          
          # Validate HTML (basic check)
          echo "Built site structure:"
          find _site -name "*.html" | head -10

      - name: 📊 Generate build report
        run: |
          echo "## Build Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Jekyll Version**: $(bundle exec jekyll --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Ruby Version**: $(ruby --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Site Size**: $(du -sh _site | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Page Count**: $(find _site -name '*.html' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Post Count**: $(find _posts -name '*.md' -o -name '*.markdown' | wc -l)" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site/"

  # Deployment job (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    needs: build
    
    permissions:
      pages: write
      id-token: write
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📧 Notify deployment success
        run: |
          echo "## Deployment Complete! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # SEO and Performance Audit (optional)
  audit:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: _site

      - name: 🔍 SEO and Performance Audit
        run: |
          echo "## SEO Audit Results 🔍" >> $GITHUB_STEP_SUMMARY
          
          # Check for essential SEO elements
          if grep -q "<title>" _site/index.html; then
            echo "- ✅ Title tags found" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Missing title tags" >> $GITHUB_STEP_SUMMARY
          fi
          
          if grep -q 'meta name="description"' _site/index.html; then
            echo "- ✅ Meta descriptions found" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Missing meta descriptions" >> $GITHUB_STEP_SUMMARY
          fi
          
          if grep -q 'property="og:' _site/index.html; then
            echo "- ✅ Open Graph tags found" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Missing Open Graph tags" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check site structure
          echo "- 📄 Pages: $(find _site -name '*.html' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Assets: $(find _site/assets -type f 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY